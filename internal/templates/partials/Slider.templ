package partials

import (
    "ennoaragon/internal/static/data"
)

templ slide() {
    <div class="hiddeduration-700 ease-in-out" 
        x-show="activeSlide === slide.Id">
        <img :src="slide.LocalSrc" class=" block w-full" :alt="slide.Title">
    </div>
}

templ sliderButtons(){
        <button type="button" class="w-3 h-3 outline outline-2 rounded-full":class="{ 
              'bg-secondary': activeSlide === slide.Id,
              'bg-custom-gradiant': activeSlide !== slide.Id 
          }" 
          x-on:click="activeSlide = slide.Id" ></button>
}

templ Slider(images []data.ImageData) {
    @templ.JSONScript("imageItems", images)
    <script type="text/javascript" >
        const images = JSON.parse(document.getElementById('imageItems').textContent)
        const slider = {
            slides: [],
            activeSlide: 0,
            total: 0,
            interval: 3000,
            autoplay: true,
            direction: 'right',
            init() {
        //        this.$nextTick(() => {
        //            this.total = this.$refs.slider.children.length
        //        })
                if(images.length === 0) {
                    console.error('No images found fatal error!')
                    return
                }
                console.log("images.length: ", images.length)
                console.log("i have beeen called")

                this.total = images.length
                this.slides = images

                if(this.autoplay) {
                    this.play()
                }
            },
            nextSlide() {
                console.log("nextSlide")
                this.activeSlide = this.activeSlide === this.slides.length - 1 ? 0 : this.activeSlide + 1
            },
            prevSlide() {
                console.log("prevSlide")
                this.activeSlide = this.activeSlide === 0 ? this.slides.length - 1 : this.activeSlide - 1
            },
            play() {
                // run every this.interval milliseconds
                let interval = setInterval(() => {
                    // check if direction is right and click next
                    if(this.direction === 'right') {
                        this.nextSlide()
                    }
                    // check if direction is left and click prev
                    if(this.direction === 'left') {
                        this.prevSlide()
                    }
                    // check if counter is equal to total and change direction to left
                    if(this.active  == this.total) {
                        this.direction = 'left'
                    }
                    // check if counter is equal to 1 and change direction to right
                    if (this.active  == 0) {
                        this.direction = 'right'
                    }

                }, this.interval)

                console.info('Interval started', interval)

            },
        }
        window.slider = slider
    </script>
    <div id="default-carousel" class="relative w-full" >
        <!-- Carousel wrapper -->
        <div class="relative h-[50vh] overflow-hidden rounded-lg md:h-[30vh] lg:h-[40vh] xl:h-[50vh] 2xl:h-[60vh]" 
            x-data="slider"
            >
            

            <template x-for="slide in slides" :key="slide.Id">
                @slide()
            </template>

            <button type="button" class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" 
                @click="prevSlide">
                <!-- Slider controls -->
                <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                    <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
                    </svg>
                    <span class="sr-only">Previous</span>
                </span>
            </button>
            <button type="button" class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" 
                @click="nextSlide">
                <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                    <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                    </svg>
                    <span class="sr-only">Next</span>
                </span>
            </button>
            <div class="absolute z-30 flex -translate-x-1/2 bottom-5 left-1/2 space-x-3 rtl:space-x-reverse">
                <template x-for="slide in slides" :key="slide.Id">
                    @sliderButtons()
                </template>
            </div>
        </div>

    </div>
}
