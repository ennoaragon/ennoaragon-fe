// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package partials

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"ennoaragon/internal/static/data"
)

func slide() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"hiddeduration-700 ease-in-out\" x-show=\"activeSlide === slide.Id\"><img :src=\"slide.LocalSrc\" class=\" block w-full\" :alt=\"slide.Title\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func sliderButtons() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<button type=\"button\" class=\"w-3 h-3 outline outline-2 rounded-full\" :class=\"{ \n              &#39;bg-secondary&#39;: activeSlide === slide.Id,\n              &#39;bg-custom-gradiant&#39;: activeSlide !== slide.Id \n          }\" x-on:click=\"activeSlide = slide.Id\"></button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Slider(images []data.ImageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.JSONScript("imageItems", images).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"text/javascript\">\n        const images = JSON.parse(document.getElementById('imageItems').textContent)\n        const slider = {\n            slides: [],\n            activeSlide: 0,\n            total: 0,\n            interval: 3000,\n            autoplay: true,\n            direction: 'right',\n            init() {\n        //        this.$nextTick(() => {\n        //            this.total = this.$refs.slider.children.length\n        //        })\n                if(images.length === 0) {\n                    console.error('No images found fatal error!')\n                    return\n                }\n                console.log(\"images.length: \", images.length)\n                console.log(\"i have beeen called\")\n\n                this.total = images.length\n                this.slides = images\n\n                if(this.autoplay) {\n                    this.play()\n                }\n            },\n            nextSlide() {\n                console.log(\"nextSlide\")\n                this.activeSlide = this.activeSlide === this.slides.length - 1 ? 0 : this.activeSlide + 1\n            },\n            prevSlide() {\n                console.log(\"prevSlide\")\n                this.activeSlide = this.activeSlide === 0 ? this.slides.length - 1 : this.activeSlide - 1\n            },\n            play() {\n                // run every this.interval milliseconds\n                let interval = setInterval(() => {\n                    // check if direction is right and click next\n                    if(this.direction === 'right') {\n                        this.nextSlide()\n                    }\n                    // check if direction is left and click prev\n                    if(this.direction === 'left') {\n                        this.prevSlide()\n                    }\n                    // check if counter is equal to total and change direction to left\n                    if(this.active  == this.total) {\n                        this.direction = 'left'\n                    }\n                    // check if counter is equal to 1 and change direction to right\n                    if (this.active  == 0) {\n                        this.direction = 'right'\n                    }\n\n                }, this.interval)\n\n                console.info('Interval started', interval)\n\n            },\n        }\n        window.slider = slider\n    </script><div id=\"default-carousel\" class=\"relative w-full\"><!-- Carousel wrapper --><div class=\"relative h-[50vh] overflow-hidden rounded-lg md:h-[30vh] lg:h-[40vh] xl:h-[50vh] 2xl:h-[60vh]\" x-data=\"slider\"><template x-for=\"slide in slides\" :key=\"slide.Id\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = slide().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</template><button type=\"button\" class=\"absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none\" @click=\"prevSlide\"><!-- Slider controls --><span class=\"inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none\"><svg class=\"w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 6 10\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 1 1 5l4 4\"></path></svg> <span class=\"sr-only\">Previous</span></span></button> <button type=\"button\" class=\"absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none\" @click=\"nextSlide\"><span class=\"inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none\"><svg class=\"w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 6 10\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m1 9 4-4-4-4\"></path></svg> <span class=\"sr-only\">Next</span></span></button><div class=\"absolute z-30 flex -translate-x-1/2 bottom-5 left-1/2 space-x-3 rtl:space-x-reverse\"><template x-for=\"slide in slides\" :key=\"slide.Id\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = sliderButtons().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</template></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
